.rn '' }`
''' $RCSfile$$Revision$$Date$
''' 
''' $Log$
''' 
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
.ds L' '
.ds R' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds L' `
.ds R' '
.if t .ds PI \(*p
.if n .ds PI PI
'br\}
.TH EVENTDRIVEN 1 "\*(RP"
.UC
.if n .hy 0 
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd S B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds / 
.	ds q 
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
Server::Server::EventDriven \- the all singing, all dancing server.
Handles i/o driven clients, timer driven clients, and interrupt
driven clients, all at the same time. Allows user defined events
also. If there are any more types of clients, please tell me.
.SH "SYNOPSIS"
Functions can be imported and used:
.PP
.Vb 24
\&    use Server::Server::EventDriven;
\&    
\&    $r1 = register_timed_client($obj1,$time1,$coderef1);
\&    $r2 = register_interval_client($obj2,$time2,$coderef2);
\&    $r3 = register_signal_client($obj3,$signal3,$coderef3);
\&    $r4 = register_io_client($obj4,$mode4,$coderef4_r,
\&                $coderef4_w,$coderef4_rw);
\&    $r5 = register_child_termination_client($obj5,$pid5,$coderef5);
\&    $r6 = register_event_client($obj6,$eventName6,$coderef6);
\&    
\&    trigger_on_deregistering($r1,$coderef7);
\&    cancel_registration($r3);
\&    $ordered_keys_ref = ordered_keys_ref();
\&    
\&    $time = maximum_inactive_server_time();
\&    set_maximum_inactive_server_time($time);
\&    execute_in_array_context_with_timeout($timeout,$timeout_retcode,
\&                $error_retcode,$coderef,@args);
\&    
\&    fork_with_child_retaining_clients($r1,$r2,...);
\&    
\&    sub something {add_event($eventName)}
\&    
\&    start_server();
.Ve
Or the class can be used with methods:
.PP
.Vb 25
\&    require Server::Server::EventDriven;
\&    $S = Server::Server::EventDriven;
\&    
\&    $r1 = $S->registerTimedClient($obj1,$time1,$coderef1);
\&    $r2 = $S->registerIntervalClient($obj2,$time2,$coderef2);
\&    $r3 = $S->registerSignalClient($obj3,$signal3,$coderef3);
\&    $r4 = $S->registerIOClient($obj4,$mode4,$coderef4_r,
\&                $coderef4_w,$coderef4_rw);
\&    $r5 = $S->registerChildTerminationClient($obj5,$pid5,$coderef5);
\&    $r6 = $S->registerEventClient($obj6,$eventName6,$coderef6);
\&    
\&    $S->triggerOnDeregistering($r1,$coderef7);
\&    $S->cancelRegistration($r3);
\&    $ordered_keys_ref = $S->orderedKeysRef();
\&    
\&    $time = $S->maximumInactiveServerTime();
\&    $S->setMaximumInactiveServerTime($time);
\&    $S->executeInArrayContextWithTimeout($timeout,$timeout_retcode,
\&                $error_retcode,$coderef,@args);
\&    
\&    $S->forkWithChildRetainingClients($r1,$r2,...);
\&    
\&    sub something {$S->addEvent($eventName)}
\&    
\&    $S->startServer();
.Ve
.SH "IMPORTANT"
The \*(L'ALRM\*(R' signal is used extensively, as is \fIalarm()\fR.
You should NOT call the function \fIalarm()\fR as this will
corrupt the internal logic of the server. Similarly \fIsleep()\fR
should not be used either, as this is often implemented
in terms of \fIalarm()\fR.
.PP
Instead use \fIexecute_in_array_context_with_timeout()\fR which is better
anyway since it allows multiple clients to set alarms simultaneously
and allows nested alarms. However, for this reason, registering
a client to receive \*(L'ALRM\*(R' signals is probably of no use.
.PP
Also, if you assign to the \f(CW%SIG\fR hash, or install signal
handlers through POSIX yourself, then you may corrupt
the logic of the server. If you need to do this for something
other than a signal (e.g. _\|_WARN_\|_), that should be okay,
otherwise you should probably create a subclass to install
the handlers you want (see the section on \fIThe SIG hash and signals\fR
and the section on \fICreating Subclasses\fR).
.SH "CONTENTS"
the section on \fINAME\fR
.PP
the section on \fISYNOPSIS\fR
.PP
the section on \fIIMPORTANT\fR
.PP
the section on \fICONTENTS\fR
.PP
the section on \fIFunction and Method Summary\fR
.PP
the section on \fIIncluding the server in your program\fR
.PP
the section on \fIStarting the server\fR
.PP
the section on \fIRegistering clients (general)\fR
.PP
the section on \fIRegistering clients (methods)\fR
.PP
the section on \fIClient order for simultaneous events\fR
.PP
the section on \fIDeregistering clients\fR
.PP
the section on \fITimeouts within client code\fR
.PP
the section on \fIForking child processes\fR
.PP
the section on \fITimes and Timing\fR
.PP
the section on \fIThe SIG hash and signals\fR
.PP
the section on \fIExample\fR
.PP
the section on \fICreating Subclasses\fR
.PP
the section on \fIExample subclasses\fR
.PP
the section on \fIPossible problems\fR
.PP
the section on \fIQuestions and Answers\fR
.PP
the section on \fIAUTHOR\fR
.PP
the section on \fICOPYRIGHT\fR
.PP
the section on \fIMODIFICATION HISTORY\fR
.SH "Function and Method Summary"
There are 15 public functions/methods:
.PP
8 dealing with registering clients;
.PP
1 to add user defined events
.PP
3 dealing with executing code and timeouts;
.PP
1 to fork the process;
.PP
and 1 to start the server.
.PP
Functions are:
.PP
.Vb 19
\& register_interval_client(O/R,INTERVAL,FUNCREF,ARG)
\& register_timed_client(O/R,TIMEOUT,FUNCREF,ARG)
\& register_io_client(O/R,MODE,HANDLE,RFUNCREF,WFUNCREF,RWFUNCREF,ARG)
\& register_signal_client(O/R,SIGNAL,FUNCREF,ARG)
\& register_child_termination_client(O/R,PID,FUNCREF,ARG)
\& register_event_client(O/R,EVENT,FUNCREF,ARG)
\& 
\& trigger_on_deregistering(REGISTRY_KEY,FUNCREF)
\& cancel_registration(REGISTRY_KEY)
\& 
\& add_event(EVENT)
\& 
\& maximum_inactive_server_time()
\& set_maximum_inactive_server_time(TIME)
\& execute_in_array_context_with_timeout(TIMEOUT,TRET,ERET,FUNCREF,ARGS)
\& 
\& fork_with_child_retaining_clients(LIST_OF_REGISTRY_KEYS)
\& 
\& start_server();
.Ve
And defined as methods:
.PP
.Vb 19
\& $SERVER->registerIntervalClient(O/R,INTERVAL,FUNCREF,ARG)
\& $SERVER->registerTimedClient(O/R,TIMEOUT,FUNCREF,ARG)
\& $SERVER->registerIOClient(O/R,MODE,HANDLE,RFUNCREF,WFUNCREF,RWFUNCREF,ARG)
\& $SERVER->registerSignalClient(O/R,SIGNAL,FUNCREF,ARG)
\& $SERVER->registerChildTerminationClient(O/R,PID,FUNCREF,ARG)
\& $SERVER->registerEventClient(O/R,EVENT,FUNCREF,ARG)
\& 
\& $SERVER->triggerOnDeregistering(REGISTRY_KEY,FUNCREF);
\& $SERVER->cancelRegistration(REGISTRY_KEY);
\& 
\& $SERVER->addEvent(EVENT)
\& 
\& $SERVER->maximumInactiveServerTime()
\& $SERVER->setMaximumInactiveServerTime(TIME)
\& $SERVER->executeInArrayContextWithTimeout(TIMEOUT,TRET,ERET,FUNCREF,ARGS)
\& 
\& $SERVER->forkWithChildRetainingClients(LIST_OF_REGISTRY_KEYS)
\& 
\& $SERVER->startServer();
.Ve
.SH "Including the server in your program"
The server is included in your program with the line
.PP
.Vb 1
\& use Server::Server::EventDriven;
.Ve
to import the functions, or
.PP
.Vb 1
\& require Server::Server::EventDriven;
.Ve
if used as a class.
.SH "Starting the server"
The server is started by executing the function or method
.Ip "start_server();" 4
.Ip "Server::Server::EventDriven->startServer();" 4
In either case, if a subclass has been defined correctly,
then the server will be started using that subclass.
.SH "Registering clients (general)"
Clients are registered with the server using any of the 6 registering
methods listed in the next section. They all have various points in common:
.PP
1. \f(CW$SERVER\fR is assumed to be Server::Server::EventDriven or a subclass;
.PP
2. All registration methods return a RegistryKey object on success
which holds the registration key, and false on failure. (Note
previous versions returned a string \- the current version should
be fully compatible with previous versions). The registration key
is unique to the registration, depending on all the parameters passed
to the registration method \- i.e a single object can be registered
multiple times using different parameters or registration
methods (multiple *identical* registrations will return the same key,
and will result in only one registration). To alter the parameters
of an existing registration, pass the registration key to the
registration method instead of the object (see \*(L'O/R\*(R' below).
.PP
3. \*(L'O/R\*(R' is the object being registered or the registration key
of an already registered object. The object can be anything
(previous versions restricted it to be class names or objects
that returned true \fIref()\fR values). This object is passed to
FUNCREF (see below) as the first argument.
.PP
4. \*(L'ARG\*(R' is anything. It is passed to FUNCREF (see below) as the last argument.
If nothing is passed, then ARG is defaulted to \fIundef()\fR;
.PP
5. At least one \*(L'FUNCREF\*(R' argument is required. All FUNCREF arguments are
CODE references to the function which is executed when the client
is triggered. Where there is more than one FUNCREF to be specified,
the one called will depend on the trigger type. When triggered,
the FUNCREF is called as:
.PP
.Vb 1
\& &FUNCREF(OBJECT,REGISTRY_KEY,some method specific args,ARG);
.Ve
where:
.PP
.Vb 5
\& OBJECT is the object registered (the 'O' in 'O/R' above);
\& REGISTRY_KEY is the registration key for that registration
\&    (the 'R' in 'O/R' above, returned by registration methods);
\& ARG is the last argument passed to the registration method
\&    ('ARG' above);
.Ve
This call to FUNCREF takes place within a timeout. The current
maximum timeout value can be retreived using
\fImaximum_inactive_server_time()\fR, and can be set using
\fIset_maximum_inactive_server_time()\fR. (These access and set the
global \f(CW$Server::Server::EventDriven::MAX_INACTIVE_SERVER_TIME\fR.)
The default value is 60 seconds. Any fatal errors caused by
executing FUNCREF are trapped, and cause the client to be deregistered.
A timeout will also cause the client to be deregistered.
.PP
NOTE however that a call to \fIexit()\fR cannot be trapped and will
cause the server process to exit. Similarly, a call to \fIdump()\fR also
cannot be trapped and will cause the server process to core dump.
.SH "Registering clients (methods)"
.Ip "register_interval_client (O/R,\s-1INTERVAL\s0,\s-1FUNCREF\s0,\s-1ARG\s0)" 4
.Ip "$\s-1SERVER\s0\->registerIntervalClient(O/R,\s-1INTERVAL\s0,\s-1FUNCREF\s0,\s-1ARG\s0)" 4
\s-1INTERVAL\s0 is a time (see the section on \fITimes and Timing\fR). The client is triggered
after every \s-1INTERVAL\s0 seconds. Triggering effects the function call
.Sp
.Vb 1
\& &FUNCREF(OBJECT,REGISTRY_KEY,INTERVAL,ARG);
.Ve
.Ip "register_timed_client (O/R,\s-1TIMEOUT\s0,\s-1FUNCREF\s0,\s-1ARG\s0)" 4
.Ip "$\s-1SERVER\s0\->registerTimedClient(O/R,\s-1TIMEOUT\s0,\s-1FUNCREF\s0,\s-1ARG\s0)" 4
\s-1TIMEOUT\s0 is a time (see the section on \fITimes and Timing\fR). The client is triggered
after \s-1TIMEOUT\s0 seconds and then deregistered. Triggering effects the
function call
.Sp
.Vb 1
\& &FUNCREF(OBJECT,REGISTRY_KEY,TIMEOUT,ARG);
.Ve
.Ip "register_io_client(O/R,\s-1MODE\s0,\s-1HANDLE\s0,\s-1RFUNCREF\s0,\s-1WFUNCREF\s0,\s-1RWFUNCREF\s0,\s-1ARG\s0)" 4
.Ip "$\s-1SERVER\s0\->registerIOClient(O/R,\s-1MODE\s0,\s-1HANDLE\s0,\s-1RFUNCREF\s0,\s-1WFUNCREF\s0,\s-1RWFUNCREF\s0,\s-1ARG\s0)" 4
\s-1MODE\s0 is \*(L'r\*(R', \*(L'w\*(R' or \*(L'rw\*(R' depending on whether the trigger
should be for input pending (read won't block), output
possible (write won't block) or both. 
\s-1HANDLE\s0 is the fully qualified package name of the filehandle
which has already been opened, on which i/o is tested.
\s-1RFUNCREF\s0, \s-1WFUNCREF\s0 and \s-1RWFUNCREF\s0 are three \*(L'\s-1FUNCREF\s0's (see above).
If input is pending on \s-1HANDLE\s0, this triggers the call
.Sp
.Vb 1
\& &RFUNCREF(OBJECT,REGISTRY_KEY,HANDLE,ARG);
.Ve
if output is possible on \s-1HANDLE\s0, this triggers the call
.Sp
.Vb 1
\& &WFUNCREF(OBJECT,REGISTRY_KEY,HANDLE,ARG);
.Ve
and if both input and output won't block, then this triggers the call
.Sp
.Vb 1
\& &RWFUNCREF(OBJECT,REGISTRY_KEY,HANDLE,ARG);
.Ve
If \s-1MODE\s0 \*(L'r\*(R' has been specified, then obviously only \s-1RFUNCREF\s0
can ever get called, and similarly if \s-1MODE\s0 \*(L'w\*(R' has been specified,
then only \s-1WFUNCREF\s0 can ever get called. However, if \s-1MODE\s0 \*(L'rw\*(R'
has been specified, then any of the three functions could be
called depending on what becomes non-blocking first.
.Sp
In all cases of \s-1MODE\s0, all three \s-1FUNCREF\s0's must be \s-1CODE\s0 references.
.Sp
Note, unlike previous versions, now if you make multiple registrations
for a specific filehandle, then client functions are still only
triggered when they are guaranteed to be non-blocking. To paraphrase,
if any \s-1FUNCREF\s0 is called, you are guaranteed to be able
to do a \fIsysread()\fR, \fIsyswrite()\fR or \fIaccept()\fR (whichever is appropriate).
.Ip "register_signal_client (O/R,\s-1SIGNAL\s0,\s-1FUNCREF\s0,\s-1ARG\s0)" 4
.Ip "$\s-1SERVER\s0\->registerSignalClient(O/R,\s-1SIGNAL\s0,\s-1FUNCREF\s0,\s-1ARG\s0)" 4
\s-1SIGNAL\s0 is a valid trappable signal. The signals are obtained
from the Config module. (Previous versions specified them
explicitly in subroutines). The \*(L'allSignals\*(R' method
retuns the list of signals.
.Sp
The client is triggered after the signal is trapped (and after
the signal handler has exited). Triggering effects the function
call
.Sp
.Vb 1
\& &FUNCREF(OBJECT,REGISTRY_KEY,SIGNAL,NSIGS,ARG);
.Ve
where
.Sp
.Vb 6
\&  NSIGS is the number of times the signal was
\&      received since this function was last called.
\&  and SIGNAL is the canonical name for the signal
\&  (which may be different from what was passed in the
\&  case of 'CHLD'/'CLD'. You can always use either - the
\&  correct signal name for the system will be used.)
.Ve
Note that \*(L'\s-1ALRM\s0\*(R' and \*(L'\s-1CLD\s0\*(R' (or \*(L'\s-1CHLD\s0\*(R' or \*(L'\s-1CHILD\s0') are specially
handled, and registering for these signals is of little use.
For alarms, use \fIexecute_in_array_context_with_timeout()\fR,
and to find out when a child process has died, register
with \fIregister_child_termination_client()\fR.
.Sp
Signals which have no clients registered for them will
cause the default action to occur (i.e. they will not 
be trapped).
.Sp
Signals are not passed to the clients immediately, they
are put into the queue and clients are triggered when
the signal queue is checked. If you need some action to occur
\s-1IMMEDIATELY\s0 on receipt of the signal, you will need to
create a subclass to handle this. (This is because setting up
an \*(L'immediately signalled\*(R' type of client is fraught with
difficulties, and is likely to lead to an unstable
process \- I tried it. And that was even without having signal
handlers stacked through recursive calls to it. Mind you,
it should be doable with \s-1POSIX\s0 signals, and is almost,
but some bug that I haven't tracked down yet seems to
propagate a die past an eval if called from within the
handler, so its not yet implemented for \s-1POSIX\s0 signals
in the server.)
.Sp
Signal handlers are \s-1NOT\s0 installed until the server has
been started (see the section on \fIStarting the server\fR).
.Sp
All signal handlers are reset to default if the server
loop exits (see the section on \fIQuestions and Answers\fR).
.Sp
See also the section on \fIThe \s-1SIG\s0 hash and signals\fR.
.Ip "register_child_termination_client (O/R,\s-1PID\s0,\s-1FUNCREF\s0,\s-1ARG\s0)" 4
.Ip "$\s-1SERVER\s0\->registerChildTerminationClient(O/R,\s-1PID\s0,\s-1FUNCREF\s0,\s-1ARG\s0)" 4
\s-1PID\s0 is the process id of the child process. When that
child dies this triggers the function call
.Sp
.Vb 1
\& &FUNCREF(OBJECT,REGISTRY_KEY,PID,ARG);
.Ve
Note that if forking the server, you should use
\fIfork_with_child_retaining_clients()\fR rather than
just a \fIfork()\fR.
.Ip "register_event_client (O/R,\s-1EVENT\s0,\s-1FUNCREF\s0,\s-1ARG\s0)" 4
.Ip "$\s-1SERVER\s0\->registerEventClient(O/R,\s-1EVENT\s0,\s-1FUNCREF\s0,\s-1ARG\s0)" 4
\s-1EVENT\s0 is any string. If any client adds the event \s-1EVENT\s0 into
the server's event loop (using \fIadd_event\fR\|(\s-1EVENT\s0)) then this
will trigger the call
.Sp
.Vb 1
\& &FUNCREF(OBJECT,REGISTRY_KEY,EVENT,ARG);
.Ve
for this client. This allows clients for user defined events
.Ip "add_event (\s-1EVENT\s0)" 4
.Ip "$\s-1SERVER\s0\->addEvent(\s-1EVENT\s0)" 4
Simply adds the string \s-1EVENT\s0 to the end of the event queue.
Any clients waiting for this event (registered using the
\fIregister_event_client()\fR function) are triggered.
.SH "Client order for simultaneous events"
If two events occur simultaneously, or an event occurs
for which more than one client is registered, then more
than one client will be triggered in the same server loop.
You may want to ensure that for any pair of clients, a specific
client is always called before another in this situation.
.PP
This can be achieved using the following function:
.Ip "ordered_keys_ref()" 4
.Ip "$\s-1SERVER\s0\->orderedKeysRef()" 4
This method/function returns a reference to an \s-1ARRAY\s0 type object.
This object holds RegistryKey objects in whatever order you
want to specify. In cases where more than one client is
to be triggered within a single server loop, the order
of the keys within this array determines the ordering of
client activation. For example, this
.Sp
.Vb 3
\& $r1 = register_...;
\& $r2 = register_...;
\& push(@{ordered_keys_ref()},$r2,$r1);
.Ve
will ensure that in such a case, the client registered on key \*(L'$r2\*(R'
will always be called before the client registered on key \*(L'$r1\*(R'.
.Sp
The object returned by \fIordered_keys_ref()\fR is actually an object
of class Server::Server::EventDriven::OrderedKeys, and there
are several methods in this class which may make it easier
for you to manipulate the array (though just treating it as
an array reference is absolutely fine):
.Sp
.Vb 7
\& $order = ordered_keys_ref();
\& $order->push_keys(LIST_OF_KEYS);
\& $order->pop_key();
\& $order->shift_key();
\& $order->unshift_keys(LIST_OF_KEYS);
\& $order->insert_keys_before(INDEX,LIST_OF_KEYS);
\& $order->delete_key_at(INDEX);
.Ve
.SH "Deregistering clients"
There are two methods for deregistering clients. One is to use the
fact that FUNCREF calls have fatal \fIdie()\fR errors trapped \- which means
that a client can \fIdie()\fR when it is triggered, and this will cause that
client to be deregistered. (Timing out will have the same effect,
but is a silly way to do it since all other clients may be blocked
until the timeout is finished).
.PP
NOTE that generating an \*(L'ALRM\*(R' signal (e.g. with \*(L"kill \*(L'ALRM,$$")
will produce a \fIdie()\fR since the alarm handler dies. This means
that if you produce an ALRM signal, you are effectively timing
out the client, and hence deregistering it.
.PP
The second method is to use the function/method provided:
.Ip "cancel_registration (\s-1REGISTRY_KEY\s0);" 4
.Ip "$\s-1SERVER\s0\->cancelRegistration(\s-1REGISTRY_KEY\s0);" 4
This deregisters the client that was registered on the key
\s-1REGISTRY_KEY\s0.
.PP
The server will deregister a client if there are any problems
with it. You can find out when a client is deregistered by
setting a function to be triggered when the client is deregistered
using the function/method:
.Ip "trigger_on_deregistering (\s-1REGISTRY_KEY\s0,\s-1FUNCREF\s0);" 4
.Ip "$\s-1SERVER\s0\->triggerOnDeregistering(\s-1REGISTRY_KEY\s0,\s-1FUNCREF\s0);" 4
This returns true (\s-1REGISTRY_KEY\s0) on success, false (undef)
on failure. On success, the code reference \s-1FUNCREF\s0 has
been added to the clients registration such that when
the client is deregistered, this triggers the call:
.Sp
.Vb 1
\& &FUNCREF(OBJECT,REGISTRY_KEY,method specific args,ARG);
.Ve
where the \*(L'method specific args\*(R' are determined by the type
of registration used (as specified in the
section the section on \fIRegistering clients (methods)\fR), and the other terms
are as previously defined.
.SH "Timeouts within client code"
Note \fIalarm()\fR should not be used (see the section on \fIIMPORTANT\fR). Instead,
a function/method has been provided which allows for nested timeouts.
.Ip "execute_in_array_context_with_timeout (\s-1TIMEOUT\s0,\s-1TRET\s0,\s-1ERET\s0,\s-1FUNCREF\s0,\s-1ARGS\s0)" 4
.Ip "$\s-1SERVER\s0\->executeInArrayContextWithTimeout(\s-1TIMEOUT\s0,\s-1TRET\s0,\s-1ERET\s0,\s-1FUNCREF\s0,\s-1ARGS\s0)" 4
\s-1TIMEOUT\s0 is a time (see the section on \fITimes and Timing\fR). This sets the timeout
for the call (note that times are rounded up to the next
integer number of seconds);
.Sp
\s-1TRET\s0 is the value/object returned as the first element of the
return array if the call is timed out;
.Sp
\s-1ERET\s0 is the value/object returned as the first element of the
return array if the call produces a fatal error;
.Sp
\s-1FUNCREF\s0 is the \s-1CODE\s0 reference which is called;
.Sp
\s-1ARGS\s0 are the arguments which are passed to \s-1FUNCREF\s0 when it is called.
.Sp
This method calls \s-1FUNCREF\s0 in an array context (if you want to
make a call in a scalar context, wrap the function and pass
the wrapped function reference, e.g.
.Sp
.Vb 1
\& sub wrapper { (scalar_call(@_)) }
.Ve
and \s-1FUNCREF\s0 = \e&wrapper), with arguments \s-1ARGS\s0. i.e the call is
.Sp
.Vb 1
\& @ret = &FUNCREF(ARGS);
.Ve
If the call is not timed out, and does not produce an error,
then the array returned by the \s-1FUNCREF\s0 call (@ret) is returned.
If a timeout occured, then the array (\s-1TRET\s0) is returned, and
if an error occurred during the \s-1FUNCREF\s0 call, then the
array (\s-1ERET\s0, $@) is returned.
.Sp
This method allows timeouts to be nested \- i.e. you can call
this method within another function which is being timed
out by this method.
.Ip "maximum_inactive_server_time()" 4
.Ip "$\s-1SERVER\s0\->maximumInactiveServerTime()" 4
Returns the current value that this is set to. This determines
the maximum time before triggered clients are timed out. Default
is 60 (seconds).
.Ip "set_maximum_inactive_server_time (\s-1TIME\s0)" 4
.Ip "$\s-1SERVER\s0\->setMaximumInactiveServerTime(\s-1TIME\s0)" 4
Sets this value. It should be a positive value.
.SH "Forking child processes"
The call \fIfork()\fR works fine, but the resulting child is a copy of the
server with all the clients retained. If the fork is to be followed
by an exec, this is fine. But otherwise, you need to know which
clients are still registered, and which ones you don't want.
.PP
Instead of worrying about this, I provide a function/method to fork the
server retaining ONLY those clients you know you want. All other clients
are deregistered in the child.
.Ip "fork_with_child_retaining_clients (\s-1LIST_OF_REGISTRY_KEYS\s0)" 4
.Ip "$\s-1SERVER\s0\->forkWithChildRetainingClients(\s-1LIST_OF_REGISTRY_KEYS\s0)" 4
This function/method works and returns as \fIfork()\fR: On failure,
undef is returned, on success the process is forked
and the child gets 0 returned while the parent gets the
process id of the child returned.
.Sp
In addition, only those clients with registry keys specified
as arguments when this method is called, have their registration
retained in the child. (Note that if you are handling signals
in addition to whatever else, you may want to retain those
signal handling clients in the child).
.Sp
This saves you from needing to think about which clients
need to be deregistered in the child \- you only need to consider
which ones need to be kept.
.SH "Times and Timing"
Note that all times should be specified in seconds, and can
be fractional (e.g. 2.35). However the fractional part may
be of no use depending on where it is used.
.PP
Currently, timing-out code using \fIexecute_in_array_context_with_timeout()\fR
has values rounded up to the next highest integer , e.g. \*(L'2.35\*(R'
will be used as \*(L'3\*(R', and \*(L'2\*(R' will be used as \*(L'3\*(R' (this
latter use is because \fIalarm()\fR can be up to one second less).
This is because \fIalarm()\fR is being used to time out code
in this function, and \fIalarm()\fR only has a 1 second resolution.
.PP
Timing in the Interval and Timer client registration is
dependent on the resolution available from a clock timer
used from Perl. If the default \fItime()\fR is used, then
fractional seconds are effectively rounded up to the
next integer, since the times can only be ticked down
in seconds. Resolutions will specify how many digits
after the decimal point are used. The maximum resolution
is one microsecond (six digits after the decimal point).
Non-significant digits may be rounded up or down.
.PP
The server specifies the timing method during initialization.
Currently, if \fIsyscall()\fR and the \fIgettimeofday()\fR system call
are available, these are used, otherwise \fItime()\fR is used.
.PP
However, the availability of the \fIgettimeofday()\fR call
is established with a call to the method \fItimeClass()\fR
in the OS specific class given by the OS name as obtained
from Config, appended to \*(L'Server::Server::EventDriven::\*(R'.
.PP
For example, if this module is run on SunOS, Config
says that the OS name ('osname\*(R' parameter) is \*(L'sunos\*(R',
in which case the call
.PP
.Vb 1
\& Server::Server::EventDriven::sunos->timeClass()
.Ve
is made. If this call produces a \fIdie()\fR, that is trapped,
and the default time class (using \fItime()\fR) is used.
If this does not die, it is assumed to return a
reference to an array, with first element being
the time class to use, and the second any initialization.
.PP
For example, in the case of SunOS, this returns
.PP
.Vb 1
\& ['Server::Server::EventDriven::Gettimeofday',116];
.Ve
which specifies to use the Gettimeofday class, and
initializes this class with the syscall number required
to make the call to \fIgettimeofday()\fR.
.PP
Please tell me what is best on any specific platform,
I'll try to include support for it. Currently automatically
supported are SunOS 4.*, IRIX 5.*, and Linux. You can
add specific OS support just be adding the package
and \fItimeClass()\fR method as shown.
.PP
Remember, you can always let it default to the plain Time
class \- this is usually sufficient.
.SH "The SIG hash and signals"
If you assign to the \f(CW%SIG\fR hash, or install signal
handlers through POSIX yourself, then you may corrupt
the logic of the server. If you need to do this for anything
other than a signal (e.g. _\|_WARN_\|_), that should be okay,
otherwise you should probably create a subclass to install
the handlers you want (see the section on \fICreating Subclasses\fR).
.PP
If you want to trap a signal, do it by registering a signal client.
If you want to trap a signal and need to have control during the 
signal handler, then subclass the EventDriven class and set
the handler in the subclass. And note that any handler which
dies will deregister any client which sends a signal for
that handler. Its usually a bad idea to do too
much in a signal handler (see the section on \fIPossible problems\fR. 
.PP
However, if you are definitely not going to register any clients
for a particular signal, you can assign your own signal handler
for that signal (though not for ALRM and CHLD).
.PP
Terminating children have their pid's removed from the process
list before clients receive the \*(L'CLD\*(R' signal. For this reason
you should not \fIwait()\fR for terminating children. If you want to
be notified of this, use the \fIregister_child_termination_client()\fR
registration method. For this reason, registering a client
to receive \*(L'CLD\*(R' signals is probably of no use.
.PP
Signals which have no clients registered for them will
not be trapped.
.PP
See also the section on \fITimeouts within client code\fR, the section on \fIIMPORTANT\fR and
the entries for methods \fIregister_signal_client()\fR
and \fIregister_child_termination_client()\fR.
.SH "Example"
Note that you can execute this example with
\f(CWperl5 -x Server/Server/EventDriven.pm\fR assuming you are in
the perl lib directory where you installed this module.
.PP
The example program below registers all the various types of clients.
.PP
o A timer client (expiring after 3 seconds), which is also told
that it is being deregistered when it dies;
.PP
o an interval client (sending a SIGCONT every 4.3 seconds for 4 times,
then deregistering) \- on the fourth triggering this client calls
a function to test nested timeouts. That should timeout after 3 seconds,
though an interrupt could terminate it quicker;
.PP
o a signal client which also tests re-registering (triggered on receiving
the first \*(L'CONT\*(R' from the interval client, at which point it reregisters,
changing the function that is called to \*(L'cont_test2\*(R' which makes it catch
the second SIGCONT from the interval client, and then deregister);
.PP
o an event client, which waits for the event \*(L'CHECK\*(R' \- that
event is sent on the third triggering of the interval client.
The Event client calls a nested timeout which tests the
functionality of nested timeouts. That should timeout after 3 seconds,
though an interrupt could terminate it quicker;
.PP
o an i/o client, which waits for some input on STDIN (requires a <RETURN>
to be triggered) and then deregisters;
.PP
o a child termination client (the process forks right at the beginning,
and the child sleeps for 10 seconds then terminates);
.PP
o and finally another signal client which will take two SIGINT's (usually
generated by typing cntrl-C) then deregisters, which means that the next
SIGINT will cause the default signal action to occur (program termination).
.PP
Note that the server will terminate when all clients are deregistered
so if you want to see everything you need to run this at least
twice \- once you can terminate by giving three cntrl-C's BEFORE all the
other clients have deregistered (you can keep the io client registered
by not typing <RETURN>), and the second time you can let the program
terminate by letting all the clients deregister (two cntrl-C's and
a <RETURN> get rid of the SIGINT client and the io client \- all other
clients get deregistered within the first 20 seconds).
.PP
#!perl5
.PP
.Vb 86
\& BEGIN {print "Initializing, process id is $$\en";}
\& use Server::Server::EventDriven;
\& 
\& # Timer test client (after 3 seconds)
\& $r = register_timed_client([],3,sub {print STDERR "Timed test\en"})
\&        || die "Timed test not registered";
\& 
\& # Deregistering Trigger test
\& trigger_on_deregistering($r,
\&   sub {print STDERR "Deregistering Trigger test\en"}) ||
\&         die "Deregistering Trigger test not registered";
\& 
\& # Interval test client (every 4.3 seconds, 4 times)
\& register_interval_client([],4.3,\e&interval_test)
\&        || die "Interval test not registered";
\& 
\& sub interval_test {
\&     $C++;print STDERR "Interval test $C\en";
\&     kill 'CONT',$$;
\&     if ($C == 3) {
\&         add_event('CHECK');
\&     } elsif ($C > 3) {
\&         $t=time;
\&         execute_in_array_context_with_timeout(2.5,0,0,\e&t4_test);
\&         print STDERR 'Nested timeout returned after ',time-$t," secs\en";
\&         die;
\&     }
\& }
\& 
\& sub t3_test {
\&     execute_in_array_context_with_timeout(2.5,0,0,
\&                                           sub {select(undef,undef,undef,9)});
\& }
\& 
\& sub t4_test {
\&     execute_in_array_context_with_timeout(6.5,0,0,
\&                                           sub {select(undef,undef,undef,9)});
\& }
\& 
\& sub t1_test {
\&     print STDERR "Event client test\en";
\&     $t=time;
\&     execute_in_array_context_with_timeout(6.5,0,0,\e&t3_test);
\&     print STDERR 'Nested timeout returned after ',time-$t," secs\en";
\&     die;
\& }
\& 
\& register_event_client([],'CHECK',\e&t1_test) ||
\&    die "Event test not registered";
\& 
\& # Signal test client (once after first Interval test)
\& $r = register_signal_client([],'CONT',\e&cont_test)
\&        || die "Signal test not registered";
\& 
\& # Reregistration test client (once after second Interval test)
\& sub cont_test {
\&   print STDERR "Signal test\en";
\&   register_signal_client($r,'CONT',\e&cont_test2)
\& }
\& sub cont_test2 {print STDERR "Reregistering test\en";die}
\& 
\& # IO test client (once after user types <RETURN>)
\& register_io_client([],'r',STDIN,\e&io,\e&io,\e&io) || 
\&        die "STDIN test not registered";
\& sub io {$l=<STDIN>;print STDERR "IO test: $l";die}
\& 
\& # Child Termination test client (after 10 seconds)
\& defined($pid = fork) || die "Couldn't fork";
\& if($pid==0){
\&   #Keep the child around for 10 seconds
\&   $SIG{'INT'} = 'IGNORE';sleep(10);die "Child Died\en"
\& }
\& print STDERR "Start child process pid = $pid\en";
\& register_child_termination_client([],$pid,
\&   sub {print STDERR "Child Termination test (pid=$_[2])\en"}) ||
\&        die "Not registered";
\& 
\& # Signal test client (catches 2 ^C, then uses default SIGINT)
\& register_signal_client([],'INT',
\&   sub {$A++;print STDERR "INT caught $A\en";$A>1 && die})
\&        || die "Signal test not registered";
\& 
\& print "Starting server now\en";
\& start_server();
\& 
\&__END__
.Ve
.SH "Creating Subclasses"
The EventDriven server is designed with subclassing in mind.
There is only so much generality that can be catered for in
any class, and specific applications will do much better
by subclassing and specializing.
.PP
In making a subclass of the server, the following points are of note:
.PP
1.  The server class is specified in the variable
.PP
.Vb 1
\& $Server::Server::EventDriven::SERVER_CLASS.
.Ve
To allow your subclass to handle ALL methods (including signal handling,
initialization and exporting of functions) you need to specify
this variable before require'ing the Server::Server::EventDriven.
This is best done as
.PP
.Vb 4
\& package MyServer;
\& BEGIN {$Server::Server::EventDriven::SERVER_CLASS ||= MyServer;}
\& @ISA = qw(Server::Server::EventDriven);
\& require Server::Server::EventDriven;
.Ve
Note that the \f(CW@ISA\fR call _MUST_ be before the \*(L'require\*(R' since
the require contains initialization calls that need to do
method lookups on \f(CW$Server::Server::EventDriven::SERVER_CLASS\fR.
.PP
Making the assignment conditional on the variable being false
allows your class to be subclassed as well.
.PP
2.  The initialization is a method called \fIinit()\fR.
Specifying the SERVER_CLASS variable above will
ensure that the init method is called in the subclass
rather than the Server::Server::EventDriven class.
.PP
Initialization occurs when Server::Server::EventDriven
is require'd.
.PP
3.  The initialization sets several system constants:
.PP
.Vb 1
\& EINTR EBADF EINVAL EFAULT WNOHANG
.Ve
and will produce a fatal error if they cannot be set.
.PP
These are set when the method \fI_setConstantsAndTimeClass()\fR
is called from \fIinit()\fR, which in turn calls \fI_setConstants()\fR.
The constants are set using the
methods \fI_setEINTR()\fR, \fI_setEBADF()\fR, \fI_setEINVAL()\fR, \fI_setEFAULT()\fR,
and \fI_setWNOHANG()\fR.
.PP
So, for example, to specify the values for SunOS 4, you could
declare the following method in a subclass:
.PP
.Vb 8
\& sub _setConstants {
\&    my($self) = @_;
\&    $self->_setEINTR(0x4);
\&    $self->_setEBADF(0x9);
\&    $self->_setEINVAL(0x16);
\&    $self->_setEFAULT(0xe);
\&    $self->_setWNOHANG(0x1);
\& }
.Ve
4.  The initialization sets and initializes the variable time
class to use. It does this by finding the OS name from Config
($Config{'osname'}) and making the call:
.PP
.Vb 1
\& Server::Server::EventDriven::<osname>->timeClass()
.Ve
where <osname> is the OS name as found from CONFIG.
If this call does not \fIdie()\fR (any call to \fIdie()\fR is trapped),
then it is assumed to return an array reference to an array
consisting of the time class to use as the first element, and
values to initialize the time class for subsequent elements.
.PP
Typically, this would be \*(L'Server::Server::EventDriven::Gettimeofday\*(R'
as the first element, and the syscall number for the
gettimeofday call as the second element (e.g. SYS_gettimeofday
from syscall.h on many systems). However, you could
explicitly specify the default \*(L'Server::Server::EventDriven::Time\*(R'
using this method, or a completely different class.
.PP
If you roll your own time class, it must have the following
methods implemented appropriately:
.PP
.Vb 11
\& initialize(?)          # Whatever
\& now()                  # Return an object representing the time now
\& newFromSeconds(SECONDS)# Return an object representing SECONDS
\& copy()                 # Return new object representing the time in 'self'
\& newFromDiff(OTHER)     # Return an object representing the time difference 
\&                        # between 'self' and OTHER
\& original()             # Return the time in its original format
\& isPositive             # Is the time positive? Return boolean
\& smallerTime(OTHER)     # Return object with smaller time, 'self' or OTHER
\& time()                 # Return the time as a number (a float if needed)
\& wholeSecondsRoundedDown()# Return time as an integer, ignoring fractions
.Ve
The method \fItimeClass()\fR gives the class being used to handle
times. Available are Server::Server::EventDriven::Time using
the \fItime()\fR function in Perl (resolution 1 second)
and Server::Server::EventDriven::Gettimeofday which uses
the \fIgettimeofday()\fR C system call using syscall.
.PP
5.  The \fIinit()\fR sets the list of signals that can
be registered for. The list is obtained from the
Config module, minus the untrappable KILL and STOP
signals.
.PP
6.  The \fIsetSignalHandlers()\fR method
.PP
The \fIsetSignalHandlers()\fR method creates the signal handlers if
necessary, and installs those that are to be permanently
installed. All signals have a signal handler assigned.
.PP
Unlike previous versions, in order to elminate possible
reentrancy bugs, the signal handlers do not execute
in subclasses. They are functions in their own namespace
which do the absolute minimum possible (mostly just
incrementing a variable).
.PP
To reimplement a signal handler, you need to respecify
the \fIsignalHandlerFor()\fR method. This method takes as
argument the signal name, and returns the name of the
handler. The handlers should increment the
global \f(CW$Server::Server::EventDriven::Signal::\fR<SIGNAME>,
e.g. the \*(L'TERM\*(R' signal handler should increment
the global \f(CW$Server::Server::EventDriven::Signal::TERM\fR.
(This is all they do by default).
.PP
The ALRM handler is implemented slightly differently, and
should not be reimplemented unless you know what you're doing.
.PP
Handlers are normally only installed when a client registers
for that signal. However, ALRM and CHLD are permanently
registered. You can specify which handlers are permanently
registered by reimplementing the \fIisSpecialSignalHandler()\fR
method. This returns true for those signals which should
have permanently installed handlers. But note that if
you reimplement this, you should include ALRM and
CHLD (or CLD) among the set of signals which return true.
.PP
Note that any handler which is set to die on receipt of
a signal will deregister any client which sends a that
signal.
.PP
7.  The server can be started using
.PP
.Vb 1
\& start_server();
.Ve
or
.PP
.Vb 1
\& Server::Server::EventDriven->startServer();
.Ve
or
.PP
.Vb 1
\& MyServer->startServer();
.Ve
since \fIstartServer()\fR actually starts the server using
the class specified in  \f(CW$Server::Server::EventDriven::SERVER_CLASS\fR
.SH "Example subclasses"
The SunOS example is not necessary, and is just here for
illustrative purposes (though can be used).
.PP
.Vb 27
\& ############################################################
\& # Subclass for SunOS4. Speeds up initialization and
\& # ensures the use of gettimeofday(2) system call.
\& # Also SunOS doesn't need to have handlers reinstalled
\& # when they are called.
\& # NOTE that you can use Server::Server::EventDriven
\& # on SunOS or any other OS without this subclass.
\& # 
\& package Server::Server::EventDriven_SunOS4;
\& 
\& BEGIN {
\&   if (`/bin/uname -sr` =~ /^SunOS\es+4/i) {
\&      $Server::Server::EventDriven::SERVER_CLASS ||= 
\&        Server::Server::EventDriven_SunOS4;
\&   } else {
\&      warn "Warning: system is not SunOS4 - using plain EventDriven class\en";
\&   }
\& }
\& 
\& @ISA = qw(Server::Server::EventDriven);
\& require Server::Server::EventDriven;
\& 
\& sub _setConstantsAndTimeClass {
\&     my($self) = @_;
\&     $self->_setConstants();
\&     $self->_setTimeClass(Server::Server::EventDriven::Gettimeofday,116);
\& }
.Ve
.Vb 29
\& sub _setConstants {
\&     my($self) = @_;
\&     $self->_setEINTR(0x4);
\&     $self->_setEBADF(0x9);
\&     $self->_setEINVAL(0x16);
\&     $self->_setEFAULT(0xe);
\&     $self->_setWNOHANG(0x1);
\& }
\& 
\& # No need to reset signal handlers within signal handlers for SunOS
\& # Though this is redundant, since POSIX handlers will be used anyway.
\& sub signalHandlerForSpecialSignal {
\&     my($self,$signal) = @_;
\&     $signal =~ tr/A-Z/a-z/;
\&     'Server::Server::EventDriven::Signal::posix_' . $signal;
\& }
\& sub defaultSignalHandlerFor {
\&     my($self,$signal) = @_;
\& 
\&     my $handler = $self->_handlerPrefix() . $signal;
\&     unless ( defined(&{$handler}) ) {
\&         eval sprintf('sub %s {$%s++;die "\en"} $%s=0;',
\&                     $handler,$handler,$handler);
\&     }
\&     $handler;
\& }
\& 
\& 1;
\& __END__
.Ve
.SH "Possible problems"
Posting from Todd Hoff
.PP
.Vb 32
\& >From: tmh@ictv.com (Todd Hoff)
\& Newsgroups: comp.lang.perl
\& Subject: Re: Perl 5: alarm BSD vs. SysV
\& Date: 3 Apr 1995 10:38:35 -0700
\& Organization: ICTV, Inc.
\& Lines: 24
\& Message-ID: <3lpbqr$gbm@anxious.ictv.com>
\& 
\& In article <3lomapINN334@calvin.lif.icnet.uk>,
\& >Have you guys tried re-setting the signal handler within the
\& >handler. Some systems reset the signal handler to default
\& >after it is called.
\& >
\& >sig handler {
\& >   $SIG{'ALRM'} = 'handler';
\& >   ...
\& >}
\& 
\& Each UNIX vendor has chosen which version of the "old" signal semantics
\& to emulate, thus signal work is not very portable and bug prone.
\& Setting the handler in the handler breaks miserably because an interrupt
\& can occur before the handler is set. What sucks is that you are
\& unlikley to see problems unless you have a loaded machine or
\& high interrupt rate, both of which i usually have :-(
\& 
\& The only solution is for perl to use POSIX signals which are safe 
\& (but harder to understand). As an aside do not do anything in a signal 
\& handler but set a flag which tells you if you should call a handler
\& in the main line logic. Reentrancy bugs are intermitent and nasty.
\& -- 
\& Todd Hoff     | My words are my own.
\& tmh@ictv.com  | And i have all this extra white space...
.Ve
In addition, perl has the problem that signals can interrupt
a malloc \- and this seems prone to causing a SIGSEGV.
.PP
The problems are decreased in this server because most of the time it
will probably be in the select call, in which case signals are likely
to hit it mostly during a select call, not a malloc. But you should be
prepared for your server to die, and have some automated procedure to
restart it \- like a cron job. This is a general problem of signals and
perl (and C), not a specific problem of the server.
.PP
If you want the general problem illustrated in a simple way, the
following is nice and clear, and will give a core dump after a
few seconds:
.PP
.Vb 27
\& @a = qw(1, 2, 3, 4);
\& $sig_happened = 0;
\& 
\& $SIG{'ALRM'} = 'sig_handler';
\& alarm(1);
\& 
\& while (1)
\& {
\&     foreach $z (@a)
\&     {
\&        reset_handler() if ($sig_happened);
\&     }
\& }
\& 
\& sub reset_handler
\& {
\&     print "Reset the handler\en";
\&     $sig_happened = 0;
\&     $SIG{'ALRM'} = 'sig_handler';
\&     alarm(1);
\& }
\& 
\& sub sig_handler
\& {
\&     $sig_happened = 1;
\& }
\&__END__
.Ve
.SH "Questions and Answers"
Q1. How do I exit the start_server loop.
.PP
A1. When there are no more clients registered with the
server, the method \fInoClients()\fR is called. If this method
returns a false value then the start_server loop terminates.
If this returns a true value, then the loop continues.
.PP
The default action is for the server to print the message
.PP
.Vb 1
\& Error: No clients are registered with the server ...
.Ve
to STDERR and then exit.
.PP
To change the default behaviour, create a subclass
which redefines noClients, and use that subclass.
For example
.PP
.Vb 5
\& package MyServer;
\& BEGIN {$Server::Server::EventDriven::SERVER_CLASS ||= MyServer;}
\& @ISA = qw(Server::Server::EventDriven);
\& require Server::Server::EventDriven;
\& sub noClients {0} # Just terminate the loop if no clients left.
.Ve
Note that you don't need this to go into a separate module \-
it can be in your main program as an initialization if this
is all you need, e.g.
.PP
.Vb 4
\& $Server::Server::EventDriven::SERVER_CLASS ||= MyServer;
\& @MyServer::ISA = qw(Server::Server::EventDriven);
\& require Server::Server::EventDriven;
\& sub MyServer::noClients {0}
.Ve
.SH "AUTHOR"
This software was developed by Jack Shirazi in the Biomedical
Informatics Unit at the Imperial Cancer Research Fund, and was partly
funded by the European Union Computer Executive Committee under
EP6708 `APPLAUSE: Application and Assessment of Parallel Programming
Using Logic\*(R'.
.SH "COPYRIGHT"
Copyright 1995 Imperial Cancer Research Fund, UK. All rights reserved.
.PP
This software is distributed under the same terms as Perl.
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of either:
.PP
a) the GNU General Public License as published by the Free
Software Foundation; either version 1, or (at your option) any
later version, or
.PP
b) the \*(L"Artistic License\*(R" which comes with Perl.
.PP
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See either
the GNU General Public License or the Artistic License for more details.
.SH "MODIFICATION HISTORY"
.Ip "Future Versions (to do)" 4
Use setitimer if available. Make into SelfLoader \fIclass\fR\|(es)
when SelfLoader comes on stream? Allow clients option
of executing in own process (psuedo-threaded). Global
store across processes. Mobile server. Shadow server.
Automatic termination on dregistration of specific clients.
.Ip "Version 2.1, 10th July 1995" 4
Altered signal installers to make \s-1SEGV\s0, \s-1ILL\s0, \s-1PIPE\s0 and \s-1BUS\s0
special handlers which are permanently installed.
Added \*(L'Free software\*(R' copyright.
.Ip "Version 2.0, 14th June 1995" 4
Added Andrew Wilcox patch to fix recursive includes in _tryH.
Invalid arguments to register methods now produce a croak.
Added Linux subclass (courtesy of Andrew Wilcox). Added
Exportable function wrappers to methods. Enabled server
loop to terminate. Podified, cleaned and added to documentation.
Removed any redundant \f(CW%SIG\fR \*(L'tie\*(R' code. Added dummy buffer
for gettimeofday syscall to workaround perl 5.000 (and 5.001?)
bug \- now works with any perl5 version.
.Sp
Changed constants retrieval to not try so hard \- now just
looks at \s-1POSIX\s0, Errno and Wait (in perl4 & 5 versions) and
uses those \- also uses classes to get gettimeofday syscall
value. Now uses signals listed in Config. Now asks the os
specific class (obtained from Config) for time class and any
time class initialization.
.Sp
Rewrote sig handlers to mostly do nothing except set a
global. Rewrote and modularized server loop so that it
is easier to alter the behaviour in a subclass. Wrapper
objects now trigger on same \*(L'trigger\*(R' method. Loop
goes through one iteration, then triggers all clients
in a user defined order (or random order for any not
in the user defined order). \s-1IO\s0 clients are guaranteed
to be triggered only if ready \- even if multiple clients
are registered on the same handle.
.Sp
Added support for \s-1POSIX\s0 signals \- uses them if available.
Fixed leaked alarm time logic. Added nested alarm time tests
to example. Changed all classes to be nested under EventDriven.
Changed registry keys to be RegistryKey objects. Added client
defined events. Altered documentation. Put server loop
in eval loop. Added signal unblocking to handle \s-1IRIX\s0 bug.
.Ip "Version 1.2, 10th April 1995" 4
Altered various internal methods (mainly associated with init)
to allow subclassing to be more straightforward. Provided
example subclasses for SunOS4 and \s-1IRIX5\s0.
Altered signal handlers to reset signal handler after being
called to provide support for systems which need it.
Removed tie on \f(CW%SIG\fR due to flakiness (%\s-1SIG\s0 no longer read-only).
Moved the methods required by tie into a separate package
space. Altered _tryH and _tryCompiling. Fixed bug in 
executeInArrayContextWithTimeout (wasn't handling recursive
timeouts !). Made \*(L'use strict\*(R' and \f(CW-w\fR clean (though the filehandles
need \*(L'no strict\*(R' in 3 places). Documentation altered.
.Ip "Version 1.1, 5th April 1995" 4
Server::Server::EventDriven::Time::copy &
Server::Server::EventDriven::Time::newFromDiff bugfixed,
Server::Server::EventDriven::_noClients error message changed,
added triggerOnDeregistering method and support methods
and altered documentation appropriately.
.Ip "Version 1.0, 10th March 1995" 4
Base version.

.rn }` ''
